// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: edr_event.proto

#include "edr_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR EdrRiskEvent::EdrRiskEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.procinfos_)*/{}
  , /*decltype(_impl_.des_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.procinfo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eventinfo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.agentip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eventid_)*/0
  , /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EdrRiskEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdrRiskEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdrRiskEventDefaultTypeInternal() {}
  union {
    EdrRiskEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdrRiskEventDefaultTypeInternal _EdrRiskEvent_default_instance_;
PROTOBUF_CONSTEXPR EdrEventMessage_SubMessage::EdrEventMessage_SubMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.eventinfo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eventtype_)*/0
  , /*decltype(_impl_.times_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EdrEventMessage_SubMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdrEventMessage_SubMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdrEventMessage_SubMessageDefaultTypeInternal() {}
  union {
    EdrEventMessage_SubMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdrEventMessage_SubMessageDefaultTypeInternal _EdrEventMessage_SubMessage_default_instance_;
PROTOBUF_CONSTEXPR EdrEventMessage::EdrEventMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EdrEventMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdrEventMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdrEventMessageDefaultTypeInternal() {}
  union {
    EdrEventMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdrEventMessageDefaultTypeInternal _EdrEventMessage_default_instance_;
PROTOBUF_CONSTEXPR ProcessStart::ProcessStart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.imagepath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.company_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.product_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.originalfile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.commandline_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currentdirectory_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.processguid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parentprocessguid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.procfileid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fileguid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.utctime_)*/0
  , /*decltype(_impl_.processid_)*/0
  , /*decltype(_impl_.terminalsessionid_)*/0
  , /*decltype(_impl_.integrity_)*/0
  , /*decltype(_impl_.createtime_)*/0
  , /*decltype(_impl_.filesize_)*/0
  , /*decltype(_impl_.signstatus_)*/0
  , /*decltype(_impl_.starttype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessStartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessStartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessStartDefaultTypeInternal() {}
  union {
    ProcessStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessStartDefaultTypeInternal _ProcessStart_default_instance_;
PROTOBUF_CONSTEXPR NetConEvent::NetConEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.processguid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.utctime_)*/0
  , /*decltype(_impl_.protocol_)*/0
  , /*decltype(_impl_.sourceip_)*/0u
  , /*decltype(_impl_.sourceport_)*/0u
  , /*decltype(_impl_.destinationip_)*/0u
  , /*decltype(_impl_.destinationport_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetConEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetConEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetConEventDefaultTypeInternal() {}
  union {
    NetConEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetConEventDefaultTypeInternal _NetConEvent_default_instance_;
PROTOBUF_CONSTEXPR CreateFileEvent::CreateFileEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.processguid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fileid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filehash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.companyname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.originalfile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.productname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.utctime_)*/0
  , /*decltype(_impl_.createtime_)*/0
  , /*decltype(_impl_.createoptions_)*/0
  , /*decltype(_impl_.desiredaccess_)*/0
  , /*decltype(_impl_.filesize_)*/0
  , /*decltype(_impl_.signstatus_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateFileEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateFileEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateFileEventDefaultTypeInternal() {}
  union {
    CreateFileEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateFileEventDefaultTypeInternal _CreateFileEvent_default_instance_;
PROTOBUF_CONSTEXPR ReNameFileEvent::ReNameFileEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.processguid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.oldpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.newpath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filesigner_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fileid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.utctime_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReNameFileEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReNameFileEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReNameFileEventDefaultTypeInternal() {}
  union {
    ReNameFileEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReNameFileEventDefaultTypeInternal _ReNameFileEvent_default_instance_;
static ::_pb::Metadata file_level_metadata_edr_5fevent_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_edr_5fevent_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_edr_5fevent_2eproto = nullptr;

const uint32_t TableStruct_edr_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EdrRiskEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EdrRiskEvent, _impl_.des_),
  PROTOBUF_FIELD_OFFSET(::EdrRiskEvent, _impl_.procinfo_),
  PROTOBUF_FIELD_OFFSET(::EdrRiskEvent, _impl_.eventid_),
  PROTOBUF_FIELD_OFFSET(::EdrRiskEvent, _impl_.eventinfo_),
  PROTOBUF_FIELD_OFFSET(::EdrRiskEvent, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::EdrRiskEvent, _impl_.procinfos_),
  PROTOBUF_FIELD_OFFSET(::EdrRiskEvent, _impl_.agentip_),
  PROTOBUF_FIELD_OFFSET(::EdrRiskEvent, _impl_.hostname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EdrEventMessage_SubMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EdrEventMessage_SubMessage, _impl_.eventtype_),
  PROTOBUF_FIELD_OFFSET(::EdrEventMessage_SubMessage, _impl_.times_),
  PROTOBUF_FIELD_OFFSET(::EdrEventMessage_SubMessage, _impl_.eventinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EdrEventMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EdrEventMessage, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _impl_.utctime_),
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _impl_.processid_),
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _impl_.imagepath_),
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _impl_.company_),
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _impl_.product_),
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _impl_.originalfile_),
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _impl_.sid_),
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _impl_.commandline_),
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _impl_.currentdirectory_),
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _impl_.terminalsessionid_),
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _impl_.signer_),
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _impl_.processguid_),
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _impl_.parentprocessguid_),
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _impl_.procfileid_),
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _impl_.signername_),
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _impl_.integrity_),
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _impl_.createtime_),
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _impl_.filesize_),
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _impl_.signstatus_),
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _impl_.fileguid_),
  PROTOBUF_FIELD_OFFSET(::ProcessStart, _impl_.starttype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetConEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NetConEvent, _impl_.utctime_),
  PROTOBUF_FIELD_OFFSET(::NetConEvent, _impl_.processguid_),
  PROTOBUF_FIELD_OFFSET(::NetConEvent, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::NetConEvent, _impl_.sourceip_),
  PROTOBUF_FIELD_OFFSET(::NetConEvent, _impl_.sourceport_),
  PROTOBUF_FIELD_OFFSET(::NetConEvent, _impl_.destinationip_),
  PROTOBUF_FIELD_OFFSET(::NetConEvent, _impl_.destinationport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CreateFileEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CreateFileEvent, _impl_.utctime_),
  PROTOBUF_FIELD_OFFSET(::CreateFileEvent, _impl_.processguid_),
  PROTOBUF_FIELD_OFFSET(::CreateFileEvent, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::CreateFileEvent, _impl_.createtime_),
  PROTOBUF_FIELD_OFFSET(::CreateFileEvent, _impl_.createoptions_),
  PROTOBUF_FIELD_OFFSET(::CreateFileEvent, _impl_.desiredaccess_),
  PROTOBUF_FIELD_OFFSET(::CreateFileEvent, _impl_.fileid_),
  PROTOBUF_FIELD_OFFSET(::CreateFileEvent, _impl_.filesize_),
  PROTOBUF_FIELD_OFFSET(::CreateFileEvent, _impl_.signstatus_),
  PROTOBUF_FIELD_OFFSET(::CreateFileEvent, _impl_.filehash_),
  PROTOBUF_FIELD_OFFSET(::CreateFileEvent, _impl_.signer_),
  PROTOBUF_FIELD_OFFSET(::CreateFileEvent, _impl_.signername_),
  PROTOBUF_FIELD_OFFSET(::CreateFileEvent, _impl_.companyname_),
  PROTOBUF_FIELD_OFFSET(::CreateFileEvent, _impl_.originalfile_),
  PROTOBUF_FIELD_OFFSET(::CreateFileEvent, _impl_.productname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReNameFileEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReNameFileEvent, _impl_.utctime_),
  PROTOBUF_FIELD_OFFSET(::ReNameFileEvent, _impl_.processguid_),
  PROTOBUF_FIELD_OFFSET(::ReNameFileEvent, _impl_.oldpath_),
  PROTOBUF_FIELD_OFFSET(::ReNameFileEvent, _impl_.newpath_),
  PROTOBUF_FIELD_OFFSET(::ReNameFileEvent, _impl_.filesigner_),
  PROTOBUF_FIELD_OFFSET(::ReNameFileEvent, _impl_.fileid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::EdrRiskEvent)},
  { 14, -1, -1, sizeof(::EdrEventMessage_SubMessage)},
  { 23, -1, -1, sizeof(::EdrEventMessage)},
  { 30, -1, -1, sizeof(::ProcessStart)},
  { 59, -1, -1, sizeof(::NetConEvent)},
  { 72, -1, -1, sizeof(::CreateFileEvent)},
  { 93, -1, -1, sizeof(::ReNameFileEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_EdrRiskEvent_default_instance_._instance,
  &::_EdrEventMessage_SubMessage_default_instance_._instance,
  &::_EdrEventMessage_default_instance_._instance,
  &::_ProcessStart_default_instance_._instance,
  &::_NetConEvent_default_instance_._instance,
  &::_CreateFileEvent_default_instance_._instance,
  &::_ReNameFileEvent_default_instance_._instance,
};

const char descriptor_table_protodef_edr_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017edr_event.proto\"\227\001\n\014EdrRiskEvent\022\013\n\003de"
  "s\030\001 \001(\t\022\020\n\010procinfo\030\002 \001(\014\022\017\n\007eventid\030\003 \001"
  "(\005\022\021\n\teventinfo\030\004 \001(\014\022\016\n\006action\030\005 \001(\005\022\021\n"
  "\tprocinfos\030\006 \003(\014\022\017\n\007agentip\030\007 \001(\t\022\020\n\010hos"
  "tname\030\010 \001(\t\"~\n\017EdrEventMessage\022(\n\003msg\030\001 "
  "\003(\0132\033.EdrEventMessage.SubMessage\032A\n\nSubM"
  "essage\022\021\n\teventtype\030\001 \001(\005\022\r\n\005times\030\002 \001(\005"
  "\022\021\n\teventinfo\030\003 \001(\014\"\312\003\n\014ProcessStart\022\017\n\007"
  "UtcTime\030\001 \001(\005\022\021\n\tProcessId\030\002 \001(\005\022\021\n\tImag"
  "ePath\030\003 \001(\t\022\014\n\004Hash\030\004 \001(\t\022\017\n\007Company\030\005 \001"
  "(\t\022\017\n\007Product\030\006 \001(\t\022\024\n\014OriginalFile\030\007 \001("
  "\t\022\014\n\004User\030\010 \001(\t\022\013\n\003SID\030\t \001(\t\022\023\n\013CommandL"
  "ine\030\n \001(\t\022\030\n\020CurrentDirectory\030\013 \001(\t\022\031\n\021T"
  "erminalSessionId\030\014 \001(\005\022\016\n\006Signer\030\r \001(\t\022\023"
  "\n\013ProcessGuid\030\016 \001(\t\022\031\n\021ParentProcessGuid"
  "\030\017 \001(\t\022\022\n\nProcFileId\030\020 \001(\t\022\022\n\nSignerName"
  "\030\021 \001(\t\022\021\n\tIntegrity\030\022 \001(\005\022\022\n\nCreateTime\030"
  "\023 \001(\005\022\020\n\010FileSize\030\024 \001(\005\022\022\n\nSignStatus\030\025 "
  "\001(\005\022\020\n\010fileguid\030\026 \001(\t\022\021\n\tStartType\030\027 \001(\005"
  "\"\233\001\n\013NetConEvent\022\017\n\007UtcTime\030\001 \001(\005\022\023\n\013Pro"
  "cessGuid\030\002 \001(\t\022\020\n\010Protocol\030\003 \001(\005\022\020\n\010Sour"
  "ceIp\030\004 \001(\007\022\022\n\nSourcePort\030\005 \001(\007\022\025\n\rDestin"
  "ationIp\030\006 \001(\007\022\027\n\017DestinationPort\030\007 \001(\007\"\267"
  "\002\n\017CreateFileEvent\022\017\n\007UtcTime\030\001 \001(\005\022\023\n\013P"
  "rocessGuid\030\002 \001(\t\022\020\n\010FileName\030\003 \001(\t\022\022\n\nCr"
  "eateTime\030\004 \001(\005\022\025\n\rCreateOptions\030\005 \001(\005\022\025\n"
  "\rDesiredAccess\030\006 \001(\005\022\016\n\006FileID\030\007 \001(\t\022\020\n\010"
  "FileSize\030\010 \001(\005\022\022\n\nSignStatus\030\t \001(\005\022\020\n\010Fi"
  "leHash\030\n \001(\t\022\016\n\006Signer\030\013 \001(\t\022\022\n\nSignerNa"
  "me\030\014 \001(\t\022\023\n\013CompanyName\030\r \001(\t\022\024\n\014Origina"
  "lFile\030\016 \001(\t\022\023\n\013ProductName\030\017 \001(\t\"}\n\017ReNa"
  "meFileEvent\022\017\n\007UtcTime\030\001 \001(\005\022\023\n\013ProcessG"
  "uid\030\002 \001(\t\022\017\n\007OldPath\030\003 \001(\t\022\017\n\007NewPath\030\004 "
  "\001(\t\022\022\n\nFileSigner\030\005 \001(\t\022\016\n\006FileID\030\006 \001(\tb"
  "\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_edr_5fevent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_edr_5fevent_2eproto = {
    false, false, 1367, descriptor_table_protodef_edr_5fevent_2eproto,
    "edr_event.proto",
    &descriptor_table_edr_5fevent_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_edr_5fevent_2eproto::offsets,
    file_level_metadata_edr_5fevent_2eproto, file_level_enum_descriptors_edr_5fevent_2eproto,
    file_level_service_descriptors_edr_5fevent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_edr_5fevent_2eproto_getter() {
  return &descriptor_table_edr_5fevent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_edr_5fevent_2eproto(&descriptor_table_edr_5fevent_2eproto);

// ===================================================================

class EdrRiskEvent::_Internal {
 public:
};

EdrRiskEvent::EdrRiskEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EdrRiskEvent)
}
EdrRiskEvent::EdrRiskEvent(const EdrRiskEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EdrRiskEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.procinfos_){from._impl_.procinfos_}
    , decltype(_impl_.des_){}
    , decltype(_impl_.procinfo_){}
    , decltype(_impl_.eventinfo_){}
    , decltype(_impl_.agentip_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.eventid_){}
    , decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.des_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.des_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_des().empty()) {
    _this->_impl_.des_.Set(from._internal_des(), 
      _this->GetArenaForAllocation());
  }
  _impl_.procinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.procinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_procinfo().empty()) {
    _this->_impl_.procinfo_.Set(from._internal_procinfo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.eventinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eventinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_eventinfo().empty()) {
    _this->_impl_.eventinfo_.Set(from._internal_eventinfo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.agentip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agentip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agentip().empty()) {
    _this->_impl_.agentip_.Set(from._internal_agentip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.eventid_, &from._impl_.eventid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.action_) -
    reinterpret_cast<char*>(&_impl_.eventid_)) + sizeof(_impl_.action_));
  // @@protoc_insertion_point(copy_constructor:EdrRiskEvent)
}

inline void EdrRiskEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.procinfos_){arena}
    , decltype(_impl_.des_){}
    , decltype(_impl_.procinfo_){}
    , decltype(_impl_.eventinfo_){}
    , decltype(_impl_.agentip_){}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.eventid_){0}
    , decltype(_impl_.action_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.des_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.des_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.procinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.procinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.eventinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eventinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.agentip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agentip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EdrRiskEvent::~EdrRiskEvent() {
  // @@protoc_insertion_point(destructor:EdrRiskEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EdrRiskEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.procinfos_.~RepeatedPtrField();
  _impl_.des_.Destroy();
  _impl_.procinfo_.Destroy();
  _impl_.eventinfo_.Destroy();
  _impl_.agentip_.Destroy();
  _impl_.hostname_.Destroy();
}

void EdrRiskEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EdrRiskEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:EdrRiskEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.procinfos_.Clear();
  _impl_.des_.ClearToEmpty();
  _impl_.procinfo_.ClearToEmpty();
  _impl_.eventinfo_.ClearToEmpty();
  _impl_.agentip_.ClearToEmpty();
  _impl_.hostname_.ClearToEmpty();
  ::memset(&_impl_.eventid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.action_) -
      reinterpret_cast<char*>(&_impl_.eventid_)) + sizeof(_impl_.action_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdrRiskEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string des = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_des();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "EdrRiskEvent.des"));
        } else
          goto handle_unusual;
        continue;
      // bytes procinfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_procinfo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 eventid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes eventinfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_eventinfo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes procinfos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_procinfos();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string agentip = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_agentip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "EdrRiskEvent.agentip"));
        } else
          goto handle_unusual;
        continue;
      // string hostname = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "EdrRiskEvent.hostname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdrRiskEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EdrRiskEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string des = 1;
  if (!this->_internal_des().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_des().data(), static_cast<int>(this->_internal_des().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EdrRiskEvent.des");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_des(), target);
  }

  // bytes procinfo = 2;
  if (!this->_internal_procinfo().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_procinfo(), target);
  }

  // int32 eventid = 3;
  if (this->_internal_eventid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_eventid(), target);
  }

  // bytes eventinfo = 4;
  if (!this->_internal_eventinfo().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_eventinfo(), target);
  }

  // int32 action = 5;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_action(), target);
  }

  // repeated bytes procinfos = 6;
  for (int i = 0, n = this->_internal_procinfos_size(); i < n; i++) {
    const auto& s = this->_internal_procinfos(i);
    target = stream->WriteBytes(6, s, target);
  }

  // string agentip = 7;
  if (!this->_internal_agentip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agentip().data(), static_cast<int>(this->_internal_agentip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EdrRiskEvent.agentip");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_agentip(), target);
  }

  // string hostname = 8;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EdrRiskEvent.hostname");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_hostname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EdrRiskEvent)
  return target;
}

size_t EdrRiskEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EdrRiskEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes procinfos = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.procinfos_.size());
  for (int i = 0, n = _impl_.procinfos_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.procinfos_.Get(i));
  }

  // string des = 1;
  if (!this->_internal_des().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_des());
  }

  // bytes procinfo = 2;
  if (!this->_internal_procinfo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_procinfo());
  }

  // bytes eventinfo = 4;
  if (!this->_internal_eventinfo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_eventinfo());
  }

  // string agentip = 7;
  if (!this->_internal_agentip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agentip());
  }

  // string hostname = 8;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // int32 eventid = 3;
  if (this->_internal_eventid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eventid());
  }

  // int32 action = 5;
  if (this->_internal_action() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdrRiskEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EdrRiskEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdrRiskEvent::GetClassData() const { return &_class_data_; }


void EdrRiskEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EdrRiskEvent*>(&to_msg);
  auto& from = static_cast<const EdrRiskEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EdrRiskEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.procinfos_.MergeFrom(from._impl_.procinfos_);
  if (!from._internal_des().empty()) {
    _this->_internal_set_des(from._internal_des());
  }
  if (!from._internal_procinfo().empty()) {
    _this->_internal_set_procinfo(from._internal_procinfo());
  }
  if (!from._internal_eventinfo().empty()) {
    _this->_internal_set_eventinfo(from._internal_eventinfo());
  }
  if (!from._internal_agentip().empty()) {
    _this->_internal_set_agentip(from._internal_agentip());
  }
  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  if (from._internal_eventid() != 0) {
    _this->_internal_set_eventid(from._internal_eventid());
  }
  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdrRiskEvent::CopyFrom(const EdrRiskEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EdrRiskEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdrRiskEvent::IsInitialized() const {
  return true;
}

void EdrRiskEvent::InternalSwap(EdrRiskEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.procinfos_.InternalSwap(&other->_impl_.procinfos_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.des_, lhs_arena,
      &other->_impl_.des_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.procinfo_, lhs_arena,
      &other->_impl_.procinfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.eventinfo_, lhs_arena,
      &other->_impl_.eventinfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.agentip_, lhs_arena,
      &other->_impl_.agentip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdrRiskEvent, _impl_.action_)
      + sizeof(EdrRiskEvent::_impl_.action_)
      - PROTOBUF_FIELD_OFFSET(EdrRiskEvent, _impl_.eventid_)>(
          reinterpret_cast<char*>(&_impl_.eventid_),
          reinterpret_cast<char*>(&other->_impl_.eventid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EdrRiskEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_edr_5fevent_2eproto_getter, &descriptor_table_edr_5fevent_2eproto_once,
      file_level_metadata_edr_5fevent_2eproto[0]);
}

// ===================================================================

class EdrEventMessage_SubMessage::_Internal {
 public:
};

EdrEventMessage_SubMessage::EdrEventMessage_SubMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EdrEventMessage.SubMessage)
}
EdrEventMessage_SubMessage::EdrEventMessage_SubMessage(const EdrEventMessage_SubMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EdrEventMessage_SubMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.eventinfo_){}
    , decltype(_impl_.eventtype_){}
    , decltype(_impl_.times_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.eventinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eventinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_eventinfo().empty()) {
    _this->_impl_.eventinfo_.Set(from._internal_eventinfo(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.eventtype_, &from._impl_.eventtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.times_) -
    reinterpret_cast<char*>(&_impl_.eventtype_)) + sizeof(_impl_.times_));
  // @@protoc_insertion_point(copy_constructor:EdrEventMessage.SubMessage)
}

inline void EdrEventMessage_SubMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.eventinfo_){}
    , decltype(_impl_.eventtype_){0}
    , decltype(_impl_.times_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.eventinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eventinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EdrEventMessage_SubMessage::~EdrEventMessage_SubMessage() {
  // @@protoc_insertion_point(destructor:EdrEventMessage.SubMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EdrEventMessage_SubMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.eventinfo_.Destroy();
}

void EdrEventMessage_SubMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EdrEventMessage_SubMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:EdrEventMessage.SubMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.eventinfo_.ClearToEmpty();
  ::memset(&_impl_.eventtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.times_) -
      reinterpret_cast<char*>(&_impl_.eventtype_)) + sizeof(_impl_.times_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdrEventMessage_SubMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 eventtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.eventtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes eventinfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_eventinfo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdrEventMessage_SubMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EdrEventMessage.SubMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 eventtype = 1;
  if (this->_internal_eventtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_eventtype(), target);
  }

  // int32 times = 2;
  if (this->_internal_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_times(), target);
  }

  // bytes eventinfo = 3;
  if (!this->_internal_eventinfo().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_eventinfo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EdrEventMessage.SubMessage)
  return target;
}

size_t EdrEventMessage_SubMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EdrEventMessage.SubMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes eventinfo = 3;
  if (!this->_internal_eventinfo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_eventinfo());
  }

  // int32 eventtype = 1;
  if (this->_internal_eventtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eventtype());
  }

  // int32 times = 2;
  if (this->_internal_times() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_times());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdrEventMessage_SubMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EdrEventMessage_SubMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdrEventMessage_SubMessage::GetClassData() const { return &_class_data_; }


void EdrEventMessage_SubMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EdrEventMessage_SubMessage*>(&to_msg);
  auto& from = static_cast<const EdrEventMessage_SubMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EdrEventMessage.SubMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_eventinfo().empty()) {
    _this->_internal_set_eventinfo(from._internal_eventinfo());
  }
  if (from._internal_eventtype() != 0) {
    _this->_internal_set_eventtype(from._internal_eventtype());
  }
  if (from._internal_times() != 0) {
    _this->_internal_set_times(from._internal_times());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdrEventMessage_SubMessage::CopyFrom(const EdrEventMessage_SubMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EdrEventMessage.SubMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdrEventMessage_SubMessage::IsInitialized() const {
  return true;
}

void EdrEventMessage_SubMessage::InternalSwap(EdrEventMessage_SubMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.eventinfo_, lhs_arena,
      &other->_impl_.eventinfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdrEventMessage_SubMessage, _impl_.times_)
      + sizeof(EdrEventMessage_SubMessage::_impl_.times_)
      - PROTOBUF_FIELD_OFFSET(EdrEventMessage_SubMessage, _impl_.eventtype_)>(
          reinterpret_cast<char*>(&_impl_.eventtype_),
          reinterpret_cast<char*>(&other->_impl_.eventtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EdrEventMessage_SubMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_edr_5fevent_2eproto_getter, &descriptor_table_edr_5fevent_2eproto_once,
      file_level_metadata_edr_5fevent_2eproto[1]);
}

// ===================================================================

class EdrEventMessage::_Internal {
 public:
};

EdrEventMessage::EdrEventMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EdrEventMessage)
}
EdrEventMessage::EdrEventMessage(const EdrEventMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EdrEventMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){from._impl_.msg_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EdrEventMessage)
}

inline void EdrEventMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EdrEventMessage::~EdrEventMessage() {
  // @@protoc_insertion_point(destructor:EdrEventMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EdrEventMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.~RepeatedPtrField();
}

void EdrEventMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EdrEventMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:EdrEventMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdrEventMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .EdrEventMessage.SubMessage msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdrEventMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EdrEventMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .EdrEventMessage.SubMessage msg = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_msg_size()); i < n; i++) {
    const auto& repfield = this->_internal_msg(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EdrEventMessage)
  return target;
}

size_t EdrEventMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EdrEventMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EdrEventMessage.SubMessage msg = 1;
  total_size += 1UL * this->_internal_msg_size();
  for (const auto& msg : this->_impl_.msg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdrEventMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EdrEventMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdrEventMessage::GetClassData() const { return &_class_data_; }


void EdrEventMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EdrEventMessage*>(&to_msg);
  auto& from = static_cast<const EdrEventMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EdrEventMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.msg_.MergeFrom(from._impl_.msg_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdrEventMessage::CopyFrom(const EdrEventMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EdrEventMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdrEventMessage::IsInitialized() const {
  return true;
}

void EdrEventMessage::InternalSwap(EdrEventMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.msg_.InternalSwap(&other->_impl_.msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EdrEventMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_edr_5fevent_2eproto_getter, &descriptor_table_edr_5fevent_2eproto_once,
      file_level_metadata_edr_5fevent_2eproto[2]);
}

// ===================================================================

class ProcessStart::_Internal {
 public:
};

ProcessStart::ProcessStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProcessStart)
}
ProcessStart::ProcessStart(const ProcessStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessStart* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.imagepath_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.company_){}
    , decltype(_impl_.product_){}
    , decltype(_impl_.originalfile_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.sid_){}
    , decltype(_impl_.commandline_){}
    , decltype(_impl_.currentdirectory_){}
    , decltype(_impl_.signer_){}
    , decltype(_impl_.processguid_){}
    , decltype(_impl_.parentprocessguid_){}
    , decltype(_impl_.procfileid_){}
    , decltype(_impl_.signername_){}
    , decltype(_impl_.fileguid_){}
    , decltype(_impl_.utctime_){}
    , decltype(_impl_.processid_){}
    , decltype(_impl_.terminalsessionid_){}
    , decltype(_impl_.integrity_){}
    , decltype(_impl_.createtime_){}
    , decltype(_impl_.filesize_){}
    , decltype(_impl_.signstatus_){}
    , decltype(_impl_.starttype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.imagepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imagepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_imagepath().empty()) {
    _this->_impl_.imagepath_.Set(from._internal_imagepath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.company_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.company_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_company().empty()) {
    _this->_impl_.company_.Set(from._internal_company(), 
      _this->GetArenaForAllocation());
  }
  _impl_.product_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.product_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_product().empty()) {
    _this->_impl_.product_.Set(from._internal_product(), 
      _this->GetArenaForAllocation());
  }
  _impl_.originalfile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.originalfile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_originalfile().empty()) {
    _this->_impl_.originalfile_.Set(from._internal_originalfile(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sid().empty()) {
    _this->_impl_.sid_.Set(from._internal_sid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.commandline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.commandline_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_commandline().empty()) {
    _this->_impl_.commandline_.Set(from._internal_commandline(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currentdirectory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currentdirectory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currentdirectory().empty()) {
    _this->_impl_.currentdirectory_.Set(from._internal_currentdirectory(), 
      _this->GetArenaForAllocation());
  }
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signer().empty()) {
    _this->_impl_.signer_.Set(from._internal_signer(), 
      _this->GetArenaForAllocation());
  }
  _impl_.processguid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processguid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_processguid().empty()) {
    _this->_impl_.processguid_.Set(from._internal_processguid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.parentprocessguid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentprocessguid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parentprocessguid().empty()) {
    _this->_impl_.parentprocessguid_.Set(from._internal_parentprocessguid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.procfileid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.procfileid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_procfileid().empty()) {
    _this->_impl_.procfileid_.Set(from._internal_procfileid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.signername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signername().empty()) {
    _this->_impl_.signername_.Set(from._internal_signername(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fileguid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileguid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fileguid().empty()) {
    _this->_impl_.fileguid_.Set(from._internal_fileguid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.utctime_, &from._impl_.utctime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.starttype_) -
    reinterpret_cast<char*>(&_impl_.utctime_)) + sizeof(_impl_.starttype_));
  // @@protoc_insertion_point(copy_constructor:ProcessStart)
}

inline void ProcessStart::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.imagepath_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.company_){}
    , decltype(_impl_.product_){}
    , decltype(_impl_.originalfile_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.sid_){}
    , decltype(_impl_.commandline_){}
    , decltype(_impl_.currentdirectory_){}
    , decltype(_impl_.signer_){}
    , decltype(_impl_.processguid_){}
    , decltype(_impl_.parentprocessguid_){}
    , decltype(_impl_.procfileid_){}
    , decltype(_impl_.signername_){}
    , decltype(_impl_.fileguid_){}
    , decltype(_impl_.utctime_){0}
    , decltype(_impl_.processid_){0}
    , decltype(_impl_.terminalsessionid_){0}
    , decltype(_impl_.integrity_){0}
    , decltype(_impl_.createtime_){0}
    , decltype(_impl_.filesize_){0}
    , decltype(_impl_.signstatus_){0}
    , decltype(_impl_.starttype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.imagepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imagepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.company_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.company_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.product_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.product_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.originalfile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.originalfile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.commandline_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.commandline_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currentdirectory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currentdirectory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.processguid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processguid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parentprocessguid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentprocessguid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.procfileid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.procfileid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fileguid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileguid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcessStart::~ProcessStart() {
  // @@protoc_insertion_point(destructor:ProcessStart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.imagepath_.Destroy();
  _impl_.hash_.Destroy();
  _impl_.company_.Destroy();
  _impl_.product_.Destroy();
  _impl_.originalfile_.Destroy();
  _impl_.user_.Destroy();
  _impl_.sid_.Destroy();
  _impl_.commandline_.Destroy();
  _impl_.currentdirectory_.Destroy();
  _impl_.signer_.Destroy();
  _impl_.processguid_.Destroy();
  _impl_.parentprocessguid_.Destroy();
  _impl_.procfileid_.Destroy();
  _impl_.signername_.Destroy();
  _impl_.fileguid_.Destroy();
}

void ProcessStart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessStart::Clear() {
// @@protoc_insertion_point(message_clear_start:ProcessStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.imagepath_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _impl_.company_.ClearToEmpty();
  _impl_.product_.ClearToEmpty();
  _impl_.originalfile_.ClearToEmpty();
  _impl_.user_.ClearToEmpty();
  _impl_.sid_.ClearToEmpty();
  _impl_.commandline_.ClearToEmpty();
  _impl_.currentdirectory_.ClearToEmpty();
  _impl_.signer_.ClearToEmpty();
  _impl_.processguid_.ClearToEmpty();
  _impl_.parentprocessguid_.ClearToEmpty();
  _impl_.procfileid_.ClearToEmpty();
  _impl_.signername_.ClearToEmpty();
  _impl_.fileguid_.ClearToEmpty();
  ::memset(&_impl_.utctime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.starttype_) -
      reinterpret_cast<char*>(&_impl_.utctime_)) + sizeof(_impl_.starttype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessStart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 UtcTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.utctime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ProcessId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.processid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ImagePath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_imagepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcessStart.ImagePath"));
        } else
          goto handle_unusual;
        continue;
      // string Hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcessStart.Hash"));
        } else
          goto handle_unusual;
        continue;
      // string Company = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_company();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcessStart.Company"));
        } else
          goto handle_unusual;
        continue;
      // string Product = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_product();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcessStart.Product"));
        } else
          goto handle_unusual;
        continue;
      // string OriginalFile = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_originalfile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcessStart.OriginalFile"));
        } else
          goto handle_unusual;
        continue;
      // string User = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcessStart.User"));
        } else
          goto handle_unusual;
        continue;
      // string SID = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_sid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcessStart.SID"));
        } else
          goto handle_unusual;
        continue;
      // string CommandLine = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_commandline();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcessStart.CommandLine"));
        } else
          goto handle_unusual;
        continue;
      // string CurrentDirectory = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_currentdirectory();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcessStart.CurrentDirectory"));
        } else
          goto handle_unusual;
        continue;
      // int32 TerminalSessionId = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.terminalsessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Signer = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_signer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcessStart.Signer"));
        } else
          goto handle_unusual;
        continue;
      // string ProcessGuid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_processguid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcessStart.ProcessGuid"));
        } else
          goto handle_unusual;
        continue;
      // string ParentProcessGuid = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_parentprocessguid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcessStart.ParentProcessGuid"));
        } else
          goto handle_unusual;
        continue;
      // string ProcFileId = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_procfileid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcessStart.ProcFileId"));
        } else
          goto handle_unusual;
        continue;
      // string SignerName = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_signername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcessStart.SignerName"));
        } else
          goto handle_unusual;
        continue;
      // int32 Integrity = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.integrity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CreateTime = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 FileSize = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.filesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SignStatus = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.signstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fileguid = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_fileguid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProcessStart.fileguid"));
        } else
          goto handle_unusual;
        continue;
      // int32 StartType = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.starttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProcessStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 UtcTime = 1;
  if (this->_internal_utctime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_utctime(), target);
  }

  // int32 ProcessId = 2;
  if (this->_internal_processid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_processid(), target);
  }

  // string ImagePath = 3;
  if (!this->_internal_imagepath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imagepath().data(), static_cast<int>(this->_internal_imagepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessStart.ImagePath");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_imagepath(), target);
  }

  // string Hash = 4;
  if (!this->_internal_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessStart.Hash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hash(), target);
  }

  // string Company = 5;
  if (!this->_internal_company().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company().data(), static_cast<int>(this->_internal_company().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessStart.Company");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_company(), target);
  }

  // string Product = 6;
  if (!this->_internal_product().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product().data(), static_cast<int>(this->_internal_product().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessStart.Product");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_product(), target);
  }

  // string OriginalFile = 7;
  if (!this->_internal_originalfile().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_originalfile().data(), static_cast<int>(this->_internal_originalfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessStart.OriginalFile");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_originalfile(), target);
  }

  // string User = 8;
  if (!this->_internal_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessStart.User");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_user(), target);
  }

  // string SID = 9;
  if (!this->_internal_sid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sid().data(), static_cast<int>(this->_internal_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessStart.SID");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sid(), target);
  }

  // string CommandLine = 10;
  if (!this->_internal_commandline().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_commandline().data(), static_cast<int>(this->_internal_commandline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessStart.CommandLine");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_commandline(), target);
  }

  // string CurrentDirectory = 11;
  if (!this->_internal_currentdirectory().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currentdirectory().data(), static_cast<int>(this->_internal_currentdirectory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessStart.CurrentDirectory");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_currentdirectory(), target);
  }

  // int32 TerminalSessionId = 12;
  if (this->_internal_terminalsessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_terminalsessionid(), target);
  }

  // string Signer = 13;
  if (!this->_internal_signer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signer().data(), static_cast<int>(this->_internal_signer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessStart.Signer");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_signer(), target);
  }

  // string ProcessGuid = 14;
  if (!this->_internal_processguid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_processguid().data(), static_cast<int>(this->_internal_processguid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessStart.ProcessGuid");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_processguid(), target);
  }

  // string ParentProcessGuid = 15;
  if (!this->_internal_parentprocessguid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parentprocessguid().data(), static_cast<int>(this->_internal_parentprocessguid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessStart.ParentProcessGuid");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_parentprocessguid(), target);
  }

  // string ProcFileId = 16;
  if (!this->_internal_procfileid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_procfileid().data(), static_cast<int>(this->_internal_procfileid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessStart.ProcFileId");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_procfileid(), target);
  }

  // string SignerName = 17;
  if (!this->_internal_signername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signername().data(), static_cast<int>(this->_internal_signername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessStart.SignerName");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_signername(), target);
  }

  // int32 Integrity = 18;
  if (this->_internal_integrity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_integrity(), target);
  }

  // int32 CreateTime = 19;
  if (this->_internal_createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_createtime(), target);
  }

  // int32 FileSize = 20;
  if (this->_internal_filesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_filesize(), target);
  }

  // int32 SignStatus = 21;
  if (this->_internal_signstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_signstatus(), target);
  }

  // string fileguid = 22;
  if (!this->_internal_fileguid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fileguid().data(), static_cast<int>(this->_internal_fileguid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcessStart.fileguid");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_fileguid(), target);
  }

  // int32 StartType = 23;
  if (this->_internal_starttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_starttype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProcessStart)
  return target;
}

size_t ProcessStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProcessStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ImagePath = 3;
  if (!this->_internal_imagepath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imagepath());
  }

  // string Hash = 4;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // string Company = 5;
  if (!this->_internal_company().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company());
  }

  // string Product = 6;
  if (!this->_internal_product().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product());
  }

  // string OriginalFile = 7;
  if (!this->_internal_originalfile().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_originalfile());
  }

  // string User = 8;
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // string SID = 9;
  if (!this->_internal_sid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());
  }

  // string CommandLine = 10;
  if (!this->_internal_commandline().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_commandline());
  }

  // string CurrentDirectory = 11;
  if (!this->_internal_currentdirectory().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currentdirectory());
  }

  // string Signer = 13;
  if (!this->_internal_signer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signer());
  }

  // string ProcessGuid = 14;
  if (!this->_internal_processguid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_processguid());
  }

  // string ParentProcessGuid = 15;
  if (!this->_internal_parentprocessguid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parentprocessguid());
  }

  // string ProcFileId = 16;
  if (!this->_internal_procfileid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_procfileid());
  }

  // string SignerName = 17;
  if (!this->_internal_signername().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signername());
  }

  // string fileguid = 22;
  if (!this->_internal_fileguid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fileguid());
  }

  // int32 UtcTime = 1;
  if (this->_internal_utctime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_utctime());
  }

  // int32 ProcessId = 2;
  if (this->_internal_processid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_processid());
  }

  // int32 TerminalSessionId = 12;
  if (this->_internal_terminalsessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_terminalsessionid());
  }

  // int32 Integrity = 18;
  if (this->_internal_integrity() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_integrity());
  }

  // int32 CreateTime = 19;
  if (this->_internal_createtime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_createtime());
  }

  // int32 FileSize = 20;
  if (this->_internal_filesize() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_filesize());
  }

  // int32 SignStatus = 21;
  if (this->_internal_signstatus() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_signstatus());
  }

  // int32 StartType = 23;
  if (this->_internal_starttype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_starttype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessStart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessStart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessStart::GetClassData() const { return &_class_data_; }


void ProcessStart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessStart*>(&to_msg);
  auto& from = static_cast<const ProcessStart&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProcessStart)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_imagepath().empty()) {
    _this->_internal_set_imagepath(from._internal_imagepath());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (!from._internal_company().empty()) {
    _this->_internal_set_company(from._internal_company());
  }
  if (!from._internal_product().empty()) {
    _this->_internal_set_product(from._internal_product());
  }
  if (!from._internal_originalfile().empty()) {
    _this->_internal_set_originalfile(from._internal_originalfile());
  }
  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  if (!from._internal_sid().empty()) {
    _this->_internal_set_sid(from._internal_sid());
  }
  if (!from._internal_commandline().empty()) {
    _this->_internal_set_commandline(from._internal_commandline());
  }
  if (!from._internal_currentdirectory().empty()) {
    _this->_internal_set_currentdirectory(from._internal_currentdirectory());
  }
  if (!from._internal_signer().empty()) {
    _this->_internal_set_signer(from._internal_signer());
  }
  if (!from._internal_processguid().empty()) {
    _this->_internal_set_processguid(from._internal_processguid());
  }
  if (!from._internal_parentprocessguid().empty()) {
    _this->_internal_set_parentprocessguid(from._internal_parentprocessguid());
  }
  if (!from._internal_procfileid().empty()) {
    _this->_internal_set_procfileid(from._internal_procfileid());
  }
  if (!from._internal_signername().empty()) {
    _this->_internal_set_signername(from._internal_signername());
  }
  if (!from._internal_fileguid().empty()) {
    _this->_internal_set_fileguid(from._internal_fileguid());
  }
  if (from._internal_utctime() != 0) {
    _this->_internal_set_utctime(from._internal_utctime());
  }
  if (from._internal_processid() != 0) {
    _this->_internal_set_processid(from._internal_processid());
  }
  if (from._internal_terminalsessionid() != 0) {
    _this->_internal_set_terminalsessionid(from._internal_terminalsessionid());
  }
  if (from._internal_integrity() != 0) {
    _this->_internal_set_integrity(from._internal_integrity());
  }
  if (from._internal_createtime() != 0) {
    _this->_internal_set_createtime(from._internal_createtime());
  }
  if (from._internal_filesize() != 0) {
    _this->_internal_set_filesize(from._internal_filesize());
  }
  if (from._internal_signstatus() != 0) {
    _this->_internal_set_signstatus(from._internal_signstatus());
  }
  if (from._internal_starttype() != 0) {
    _this->_internal_set_starttype(from._internal_starttype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessStart::CopyFrom(const ProcessStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProcessStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessStart::IsInitialized() const {
  return true;
}

void ProcessStart::InternalSwap(ProcessStart* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.imagepath_, lhs_arena,
      &other->_impl_.imagepath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.company_, lhs_arena,
      &other->_impl_.company_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.product_, lhs_arena,
      &other->_impl_.product_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.originalfile_, lhs_arena,
      &other->_impl_.originalfile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sid_, lhs_arena,
      &other->_impl_.sid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.commandline_, lhs_arena,
      &other->_impl_.commandline_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currentdirectory_, lhs_arena,
      &other->_impl_.currentdirectory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signer_, lhs_arena,
      &other->_impl_.signer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.processguid_, lhs_arena,
      &other->_impl_.processguid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parentprocessguid_, lhs_arena,
      &other->_impl_.parentprocessguid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.procfileid_, lhs_arena,
      &other->_impl_.procfileid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signername_, lhs_arena,
      &other->_impl_.signername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fileguid_, lhs_arena,
      &other->_impl_.fileguid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessStart, _impl_.starttype_)
      + sizeof(ProcessStart::_impl_.starttype_)
      - PROTOBUF_FIELD_OFFSET(ProcessStart, _impl_.utctime_)>(
          reinterpret_cast<char*>(&_impl_.utctime_),
          reinterpret_cast<char*>(&other->_impl_.utctime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessStart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_edr_5fevent_2eproto_getter, &descriptor_table_edr_5fevent_2eproto_once,
      file_level_metadata_edr_5fevent_2eproto[3]);
}

// ===================================================================

class NetConEvent::_Internal {
 public:
};

NetConEvent::NetConEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NetConEvent)
}
NetConEvent::NetConEvent(const NetConEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetConEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.processguid_){}
    , decltype(_impl_.utctime_){}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.sourceip_){}
    , decltype(_impl_.sourceport_){}
    , decltype(_impl_.destinationip_){}
    , decltype(_impl_.destinationport_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.processguid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processguid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_processguid().empty()) {
    _this->_impl_.processguid_.Set(from._internal_processguid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.utctime_, &from._impl_.utctime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.destinationport_) -
    reinterpret_cast<char*>(&_impl_.utctime_)) + sizeof(_impl_.destinationport_));
  // @@protoc_insertion_point(copy_constructor:NetConEvent)
}

inline void NetConEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.processguid_){}
    , decltype(_impl_.utctime_){0}
    , decltype(_impl_.protocol_){0}
    , decltype(_impl_.sourceip_){0u}
    , decltype(_impl_.sourceport_){0u}
    , decltype(_impl_.destinationip_){0u}
    , decltype(_impl_.destinationport_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.processguid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processguid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetConEvent::~NetConEvent() {
  // @@protoc_insertion_point(destructor:NetConEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetConEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.processguid_.Destroy();
}

void NetConEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetConEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:NetConEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.processguid_.ClearToEmpty();
  ::memset(&_impl_.utctime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.destinationport_) -
      reinterpret_cast<char*>(&_impl_.utctime_)) + sizeof(_impl_.destinationport_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetConEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 UtcTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.utctime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ProcessGuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_processguid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NetConEvent.ProcessGuid"));
        } else
          goto handle_unusual;
        continue;
      // int32 Protocol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed32 SourceIp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.sourceip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // fixed32 SourcePort = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.sourceport_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // fixed32 DestinationIp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.destinationip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // fixed32 DestinationPort = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.destinationport_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetConEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetConEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 UtcTime = 1;
  if (this->_internal_utctime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_utctime(), target);
  }

  // string ProcessGuid = 2;
  if (!this->_internal_processguid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_processguid().data(), static_cast<int>(this->_internal_processguid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NetConEvent.ProcessGuid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_processguid(), target);
  }

  // int32 Protocol = 3;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_protocol(), target);
  }

  // fixed32 SourceIp = 4;
  if (this->_internal_sourceip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(4, this->_internal_sourceip(), target);
  }

  // fixed32 SourcePort = 5;
  if (this->_internal_sourceport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(5, this->_internal_sourceport(), target);
  }

  // fixed32 DestinationIp = 6;
  if (this->_internal_destinationip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(6, this->_internal_destinationip(), target);
  }

  // fixed32 DestinationPort = 7;
  if (this->_internal_destinationport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(7, this->_internal_destinationport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetConEvent)
  return target;
}

size_t NetConEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetConEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ProcessGuid = 2;
  if (!this->_internal_processguid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_processguid());
  }

  // int32 UtcTime = 1;
  if (this->_internal_utctime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_utctime());
  }

  // int32 Protocol = 3;
  if (this->_internal_protocol() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_protocol());
  }

  // fixed32 SourceIp = 4;
  if (this->_internal_sourceip() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 SourcePort = 5;
  if (this->_internal_sourceport() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 DestinationIp = 6;
  if (this->_internal_destinationip() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 DestinationPort = 7;
  if (this->_internal_destinationport() != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetConEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetConEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetConEvent::GetClassData() const { return &_class_data_; }


void NetConEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetConEvent*>(&to_msg);
  auto& from = static_cast<const NetConEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NetConEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_processguid().empty()) {
    _this->_internal_set_processguid(from._internal_processguid());
  }
  if (from._internal_utctime() != 0) {
    _this->_internal_set_utctime(from._internal_utctime());
  }
  if (from._internal_protocol() != 0) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  if (from._internal_sourceip() != 0) {
    _this->_internal_set_sourceip(from._internal_sourceip());
  }
  if (from._internal_sourceport() != 0) {
    _this->_internal_set_sourceport(from._internal_sourceport());
  }
  if (from._internal_destinationip() != 0) {
    _this->_internal_set_destinationip(from._internal_destinationip());
  }
  if (from._internal_destinationport() != 0) {
    _this->_internal_set_destinationport(from._internal_destinationport());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetConEvent::CopyFrom(const NetConEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetConEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetConEvent::IsInitialized() const {
  return true;
}

void NetConEvent::InternalSwap(NetConEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.processguid_, lhs_arena,
      &other->_impl_.processguid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetConEvent, _impl_.destinationport_)
      + sizeof(NetConEvent::_impl_.destinationport_)
      - PROTOBUF_FIELD_OFFSET(NetConEvent, _impl_.utctime_)>(
          reinterpret_cast<char*>(&_impl_.utctime_),
          reinterpret_cast<char*>(&other->_impl_.utctime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetConEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_edr_5fevent_2eproto_getter, &descriptor_table_edr_5fevent_2eproto_once,
      file_level_metadata_edr_5fevent_2eproto[4]);
}

// ===================================================================

class CreateFileEvent::_Internal {
 public:
};

CreateFileEvent::CreateFileEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CreateFileEvent)
}
CreateFileEvent::CreateFileEvent(const CreateFileEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateFileEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.processguid_){}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.fileid_){}
    , decltype(_impl_.filehash_){}
    , decltype(_impl_.signer_){}
    , decltype(_impl_.signername_){}
    , decltype(_impl_.companyname_){}
    , decltype(_impl_.originalfile_){}
    , decltype(_impl_.productname_){}
    , decltype(_impl_.utctime_){}
    , decltype(_impl_.createtime_){}
    , decltype(_impl_.createoptions_){}
    , decltype(_impl_.desiredaccess_){}
    , decltype(_impl_.filesize_){}
    , decltype(_impl_.signstatus_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.processguid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processguid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_processguid().empty()) {
    _this->_impl_.processguid_.Set(from._internal_processguid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fileid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fileid().empty()) {
    _this->_impl_.fileid_.Set(from._internal_fileid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filehash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filehash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filehash().empty()) {
    _this->_impl_.filehash_.Set(from._internal_filehash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signer().empty()) {
    _this->_impl_.signer_.Set(from._internal_signer(), 
      _this->GetArenaForAllocation());
  }
  _impl_.signername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signername().empty()) {
    _this->_impl_.signername_.Set(from._internal_signername(), 
      _this->GetArenaForAllocation());
  }
  _impl_.companyname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.companyname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_companyname().empty()) {
    _this->_impl_.companyname_.Set(from._internal_companyname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.originalfile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.originalfile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_originalfile().empty()) {
    _this->_impl_.originalfile_.Set(from._internal_originalfile(), 
      _this->GetArenaForAllocation());
  }
  _impl_.productname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.productname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_productname().empty()) {
    _this->_impl_.productname_.Set(from._internal_productname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.utctime_, &from._impl_.utctime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.signstatus_) -
    reinterpret_cast<char*>(&_impl_.utctime_)) + sizeof(_impl_.signstatus_));
  // @@protoc_insertion_point(copy_constructor:CreateFileEvent)
}

inline void CreateFileEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.processguid_){}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.fileid_){}
    , decltype(_impl_.filehash_){}
    , decltype(_impl_.signer_){}
    , decltype(_impl_.signername_){}
    , decltype(_impl_.companyname_){}
    , decltype(_impl_.originalfile_){}
    , decltype(_impl_.productname_){}
    , decltype(_impl_.utctime_){0}
    , decltype(_impl_.createtime_){0}
    , decltype(_impl_.createoptions_){0}
    , decltype(_impl_.desiredaccess_){0}
    , decltype(_impl_.filesize_){0}
    , decltype(_impl_.signstatus_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.processguid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processguid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fileid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filehash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filehash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.companyname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.companyname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.originalfile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.originalfile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.productname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.productname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateFileEvent::~CreateFileEvent() {
  // @@protoc_insertion_point(destructor:CreateFileEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateFileEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.processguid_.Destroy();
  _impl_.filename_.Destroy();
  _impl_.fileid_.Destroy();
  _impl_.filehash_.Destroy();
  _impl_.signer_.Destroy();
  _impl_.signername_.Destroy();
  _impl_.companyname_.Destroy();
  _impl_.originalfile_.Destroy();
  _impl_.productname_.Destroy();
}

void CreateFileEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateFileEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateFileEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.processguid_.ClearToEmpty();
  _impl_.filename_.ClearToEmpty();
  _impl_.fileid_.ClearToEmpty();
  _impl_.filehash_.ClearToEmpty();
  _impl_.signer_.ClearToEmpty();
  _impl_.signername_.ClearToEmpty();
  _impl_.companyname_.ClearToEmpty();
  _impl_.originalfile_.ClearToEmpty();
  _impl_.productname_.ClearToEmpty();
  ::memset(&_impl_.utctime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.signstatus_) -
      reinterpret_cast<char*>(&_impl_.utctime_)) + sizeof(_impl_.signstatus_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateFileEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 UtcTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.utctime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ProcessGuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_processguid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CreateFileEvent.ProcessGuid"));
        } else
          goto handle_unusual;
        continue;
      // string FileName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CreateFileEvent.FileName"));
        } else
          goto handle_unusual;
        continue;
      // int32 CreateTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CreateOptions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.createoptions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DesiredAccess = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.desiredaccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string FileID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_fileid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CreateFileEvent.FileID"));
        } else
          goto handle_unusual;
        continue;
      // int32 FileSize = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.filesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SignStatus = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.signstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string FileHash = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_filehash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CreateFileEvent.FileHash"));
        } else
          goto handle_unusual;
        continue;
      // string Signer = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_signer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CreateFileEvent.Signer"));
        } else
          goto handle_unusual;
        continue;
      // string SignerName = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_signername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CreateFileEvent.SignerName"));
        } else
          goto handle_unusual;
        continue;
      // string CompanyName = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_companyname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CreateFileEvent.CompanyName"));
        } else
          goto handle_unusual;
        continue;
      // string OriginalFile = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_originalfile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CreateFileEvent.OriginalFile"));
        } else
          goto handle_unusual;
        continue;
      // string ProductName = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_productname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CreateFileEvent.ProductName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateFileEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CreateFileEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 UtcTime = 1;
  if (this->_internal_utctime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_utctime(), target);
  }

  // string ProcessGuid = 2;
  if (!this->_internal_processguid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_processguid().data(), static_cast<int>(this->_internal_processguid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CreateFileEvent.ProcessGuid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_processguid(), target);
  }

  // string FileName = 3;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CreateFileEvent.FileName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filename(), target);
  }

  // int32 CreateTime = 4;
  if (this->_internal_createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_createtime(), target);
  }

  // int32 CreateOptions = 5;
  if (this->_internal_createoptions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_createoptions(), target);
  }

  // int32 DesiredAccess = 6;
  if (this->_internal_desiredaccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_desiredaccess(), target);
  }

  // string FileID = 7;
  if (!this->_internal_fileid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fileid().data(), static_cast<int>(this->_internal_fileid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CreateFileEvent.FileID");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_fileid(), target);
  }

  // int32 FileSize = 8;
  if (this->_internal_filesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_filesize(), target);
  }

  // int32 SignStatus = 9;
  if (this->_internal_signstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_signstatus(), target);
  }

  // string FileHash = 10;
  if (!this->_internal_filehash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filehash().data(), static_cast<int>(this->_internal_filehash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CreateFileEvent.FileHash");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_filehash(), target);
  }

  // string Signer = 11;
  if (!this->_internal_signer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signer().data(), static_cast<int>(this->_internal_signer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CreateFileEvent.Signer");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_signer(), target);
  }

  // string SignerName = 12;
  if (!this->_internal_signername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signername().data(), static_cast<int>(this->_internal_signername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CreateFileEvent.SignerName");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_signername(), target);
  }

  // string CompanyName = 13;
  if (!this->_internal_companyname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_companyname().data(), static_cast<int>(this->_internal_companyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CreateFileEvent.CompanyName");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_companyname(), target);
  }

  // string OriginalFile = 14;
  if (!this->_internal_originalfile().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_originalfile().data(), static_cast<int>(this->_internal_originalfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CreateFileEvent.OriginalFile");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_originalfile(), target);
  }

  // string ProductName = 15;
  if (!this->_internal_productname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_productname().data(), static_cast<int>(this->_internal_productname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CreateFileEvent.ProductName");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_productname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateFileEvent)
  return target;
}

size_t CreateFileEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateFileEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ProcessGuid = 2;
  if (!this->_internal_processguid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_processguid());
  }

  // string FileName = 3;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // string FileID = 7;
  if (!this->_internal_fileid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fileid());
  }

  // string FileHash = 10;
  if (!this->_internal_filehash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filehash());
  }

  // string Signer = 11;
  if (!this->_internal_signer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signer());
  }

  // string SignerName = 12;
  if (!this->_internal_signername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signername());
  }

  // string CompanyName = 13;
  if (!this->_internal_companyname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_companyname());
  }

  // string OriginalFile = 14;
  if (!this->_internal_originalfile().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_originalfile());
  }

  // string ProductName = 15;
  if (!this->_internal_productname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_productname());
  }

  // int32 UtcTime = 1;
  if (this->_internal_utctime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_utctime());
  }

  // int32 CreateTime = 4;
  if (this->_internal_createtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_createtime());
  }

  // int32 CreateOptions = 5;
  if (this->_internal_createoptions() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_createoptions());
  }

  // int32 DesiredAccess = 6;
  if (this->_internal_desiredaccess() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_desiredaccess());
  }

  // int32 FileSize = 8;
  if (this->_internal_filesize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_filesize());
  }

  // int32 SignStatus = 9;
  if (this->_internal_signstatus() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_signstatus());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateFileEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateFileEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateFileEvent::GetClassData() const { return &_class_data_; }


void CreateFileEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateFileEvent*>(&to_msg);
  auto& from = static_cast<const CreateFileEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CreateFileEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_processguid().empty()) {
    _this->_internal_set_processguid(from._internal_processguid());
  }
  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  if (!from._internal_fileid().empty()) {
    _this->_internal_set_fileid(from._internal_fileid());
  }
  if (!from._internal_filehash().empty()) {
    _this->_internal_set_filehash(from._internal_filehash());
  }
  if (!from._internal_signer().empty()) {
    _this->_internal_set_signer(from._internal_signer());
  }
  if (!from._internal_signername().empty()) {
    _this->_internal_set_signername(from._internal_signername());
  }
  if (!from._internal_companyname().empty()) {
    _this->_internal_set_companyname(from._internal_companyname());
  }
  if (!from._internal_originalfile().empty()) {
    _this->_internal_set_originalfile(from._internal_originalfile());
  }
  if (!from._internal_productname().empty()) {
    _this->_internal_set_productname(from._internal_productname());
  }
  if (from._internal_utctime() != 0) {
    _this->_internal_set_utctime(from._internal_utctime());
  }
  if (from._internal_createtime() != 0) {
    _this->_internal_set_createtime(from._internal_createtime());
  }
  if (from._internal_createoptions() != 0) {
    _this->_internal_set_createoptions(from._internal_createoptions());
  }
  if (from._internal_desiredaccess() != 0) {
    _this->_internal_set_desiredaccess(from._internal_desiredaccess());
  }
  if (from._internal_filesize() != 0) {
    _this->_internal_set_filesize(from._internal_filesize());
  }
  if (from._internal_signstatus() != 0) {
    _this->_internal_set_signstatus(from._internal_signstatus());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateFileEvent::CopyFrom(const CreateFileEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateFileEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateFileEvent::IsInitialized() const {
  return true;
}

void CreateFileEvent::InternalSwap(CreateFileEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.processguid_, lhs_arena,
      &other->_impl_.processguid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fileid_, lhs_arena,
      &other->_impl_.fileid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filehash_, lhs_arena,
      &other->_impl_.filehash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signer_, lhs_arena,
      &other->_impl_.signer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signername_, lhs_arena,
      &other->_impl_.signername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.companyname_, lhs_arena,
      &other->_impl_.companyname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.originalfile_, lhs_arena,
      &other->_impl_.originalfile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.productname_, lhs_arena,
      &other->_impl_.productname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateFileEvent, _impl_.signstatus_)
      + sizeof(CreateFileEvent::_impl_.signstatus_)
      - PROTOBUF_FIELD_OFFSET(CreateFileEvent, _impl_.utctime_)>(
          reinterpret_cast<char*>(&_impl_.utctime_),
          reinterpret_cast<char*>(&other->_impl_.utctime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateFileEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_edr_5fevent_2eproto_getter, &descriptor_table_edr_5fevent_2eproto_once,
      file_level_metadata_edr_5fevent_2eproto[5]);
}

// ===================================================================

class ReNameFileEvent::_Internal {
 public:
};

ReNameFileEvent::ReNameFileEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ReNameFileEvent)
}
ReNameFileEvent::ReNameFileEvent(const ReNameFileEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReNameFileEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.processguid_){}
    , decltype(_impl_.oldpath_){}
    , decltype(_impl_.newpath_){}
    , decltype(_impl_.filesigner_){}
    , decltype(_impl_.fileid_){}
    , decltype(_impl_.utctime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.processguid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processguid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_processguid().empty()) {
    _this->_impl_.processguid_.Set(from._internal_processguid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.oldpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oldpath().empty()) {
    _this->_impl_.oldpath_.Set(from._internal_oldpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.newpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_newpath().empty()) {
    _this->_impl_.newpath_.Set(from._internal_newpath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filesigner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesigner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filesigner().empty()) {
    _this->_impl_.filesigner_.Set(from._internal_filesigner(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fileid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fileid().empty()) {
    _this->_impl_.fileid_.Set(from._internal_fileid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.utctime_ = from._impl_.utctime_;
  // @@protoc_insertion_point(copy_constructor:ReNameFileEvent)
}

inline void ReNameFileEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.processguid_){}
    , decltype(_impl_.oldpath_){}
    , decltype(_impl_.newpath_){}
    , decltype(_impl_.filesigner_){}
    , decltype(_impl_.fileid_){}
    , decltype(_impl_.utctime_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.processguid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.processguid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oldpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.newpath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newpath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filesigner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filesigner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fileid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fileid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReNameFileEvent::~ReNameFileEvent() {
  // @@protoc_insertion_point(destructor:ReNameFileEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReNameFileEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.processguid_.Destroy();
  _impl_.oldpath_.Destroy();
  _impl_.newpath_.Destroy();
  _impl_.filesigner_.Destroy();
  _impl_.fileid_.Destroy();
}

void ReNameFileEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReNameFileEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ReNameFileEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.processguid_.ClearToEmpty();
  _impl_.oldpath_.ClearToEmpty();
  _impl_.newpath_.ClearToEmpty();
  _impl_.filesigner_.ClearToEmpty();
  _impl_.fileid_.ClearToEmpty();
  _impl_.utctime_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReNameFileEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 UtcTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.utctime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ProcessGuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_processguid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReNameFileEvent.ProcessGuid"));
        } else
          goto handle_unusual;
        continue;
      // string OldPath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_oldpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReNameFileEvent.OldPath"));
        } else
          goto handle_unusual;
        continue;
      // string NewPath = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_newpath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReNameFileEvent.NewPath"));
        } else
          goto handle_unusual;
        continue;
      // string FileSigner = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_filesigner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReNameFileEvent.FileSigner"));
        } else
          goto handle_unusual;
        continue;
      // string FileID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_fileid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ReNameFileEvent.FileID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReNameFileEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReNameFileEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 UtcTime = 1;
  if (this->_internal_utctime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_utctime(), target);
  }

  // string ProcessGuid = 2;
  if (!this->_internal_processguid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_processguid().data(), static_cast<int>(this->_internal_processguid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReNameFileEvent.ProcessGuid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_processguid(), target);
  }

  // string OldPath = 3;
  if (!this->_internal_oldpath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_oldpath().data(), static_cast<int>(this->_internal_oldpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReNameFileEvent.OldPath");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_oldpath(), target);
  }

  // string NewPath = 4;
  if (!this->_internal_newpath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newpath().data(), static_cast<int>(this->_internal_newpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReNameFileEvent.NewPath");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_newpath(), target);
  }

  // string FileSigner = 5;
  if (!this->_internal_filesigner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filesigner().data(), static_cast<int>(this->_internal_filesigner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReNameFileEvent.FileSigner");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_filesigner(), target);
  }

  // string FileID = 6;
  if (!this->_internal_fileid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fileid().data(), static_cast<int>(this->_internal_fileid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReNameFileEvent.FileID");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_fileid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReNameFileEvent)
  return target;
}

size_t ReNameFileEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReNameFileEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ProcessGuid = 2;
  if (!this->_internal_processguid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_processguid());
  }

  // string OldPath = 3;
  if (!this->_internal_oldpath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oldpath());
  }

  // string NewPath = 4;
  if (!this->_internal_newpath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newpath());
  }

  // string FileSigner = 5;
  if (!this->_internal_filesigner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filesigner());
  }

  // string FileID = 6;
  if (!this->_internal_fileid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fileid());
  }

  // int32 UtcTime = 1;
  if (this->_internal_utctime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_utctime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReNameFileEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReNameFileEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReNameFileEvent::GetClassData() const { return &_class_data_; }


void ReNameFileEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReNameFileEvent*>(&to_msg);
  auto& from = static_cast<const ReNameFileEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ReNameFileEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_processguid().empty()) {
    _this->_internal_set_processguid(from._internal_processguid());
  }
  if (!from._internal_oldpath().empty()) {
    _this->_internal_set_oldpath(from._internal_oldpath());
  }
  if (!from._internal_newpath().empty()) {
    _this->_internal_set_newpath(from._internal_newpath());
  }
  if (!from._internal_filesigner().empty()) {
    _this->_internal_set_filesigner(from._internal_filesigner());
  }
  if (!from._internal_fileid().empty()) {
    _this->_internal_set_fileid(from._internal_fileid());
  }
  if (from._internal_utctime() != 0) {
    _this->_internal_set_utctime(from._internal_utctime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReNameFileEvent::CopyFrom(const ReNameFileEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReNameFileEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReNameFileEvent::IsInitialized() const {
  return true;
}

void ReNameFileEvent::InternalSwap(ReNameFileEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.processguid_, lhs_arena,
      &other->_impl_.processguid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.oldpath_, lhs_arena,
      &other->_impl_.oldpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newpath_, lhs_arena,
      &other->_impl_.newpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filesigner_, lhs_arena,
      &other->_impl_.filesigner_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fileid_, lhs_arena,
      &other->_impl_.fileid_, rhs_arena
  );
  swap(_impl_.utctime_, other->_impl_.utctime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReNameFileEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_edr_5fevent_2eproto_getter, &descriptor_table_edr_5fevent_2eproto_once,
      file_level_metadata_edr_5fevent_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::EdrRiskEvent*
Arena::CreateMaybeMessage< ::EdrRiskEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EdrRiskEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::EdrEventMessage_SubMessage*
Arena::CreateMaybeMessage< ::EdrEventMessage_SubMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EdrEventMessage_SubMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::EdrEventMessage*
Arena::CreateMaybeMessage< ::EdrEventMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EdrEventMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ProcessStart*
Arena::CreateMaybeMessage< ::ProcessStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProcessStart >(arena);
}
template<> PROTOBUF_NOINLINE ::NetConEvent*
Arena::CreateMaybeMessage< ::NetConEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NetConEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CreateFileEvent*
Arena::CreateMaybeMessage< ::CreateFileEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CreateFileEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ReNameFileEvent*
Arena::CreateMaybeMessage< ::ReNameFileEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReNameFileEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
